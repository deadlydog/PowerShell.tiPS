name: process-new-powershell-tip-issue

# Trigger whenever a new issue is opened, and ensure (in the job) it has the automation label meaning we should process it.
on:
  issues:
    # Can add 'labeled' to make troubleshooting easier and simply remove/add label to trigger workflow run.
    # Do not leave it on though, as it will result in duplicate PRs being created when new tips are submitted.
    types: [opened, labeled]

jobs:
  process-new-tip-issue:
    if: contains(github.event.issue.labels.*.name, 'automation-new-tip-issue-do-not-use')
    runs-on: windows-latest # Use Windows to ensure dotnet SDK is installed to build the assemblies.
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Add comment to issue letting user know we are processing it
        shell: pwsh
        run: |
          [string] $runUrl = "$Env:GITHUB_SERVER_URL/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          [string] $message = @"
          Thank you for your submission! üôè

          A pull request is being created for your tip via the following GitHub Actions run and should be linked to this issue shortly... ‚è±Ô∏è

          $runUrl
          "@

          gh issue comment "${{ github.event.issue.number }}" --body $message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create branch for PR
        id: create-branch
        shell: pwsh
        run: |
          [string] $branchName = "new-tip/issue-${{ github.event.issue.number }}"

          Write-Output "Creating and checking out new branch: $branchName"
          git config --global user.name 'GitHub Action - tiPS Automation'
          git config --global user.email 'tiPSAutomation@DoesNotExist.com'
          git checkout -b "$branchName"

          Write-Output "Writing variables to environment variables for later steps..."
          "branch_name=$branchName" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Extract tip information from issue and create new tip file
        id: create-tip-file
        shell: pwsh
        run: |
          Write-Output "Reading information from GitHub issue..."
          $body = @'
          ${{ github.event.issue.body }}
          '@

          Write-Output "Displaying issue body for troubleshooting purposes:"
          Write-Output "----------------------------------------"
          Write-Output $body
          Write-Output "----------------------------------------"

          Write-Output "Extracting information from issue body to local variables..."
          [string] $tipTitle = [string]::Empty
          [string] $tipText = [string]::Empty
          [string] $tipExample = [string]::Empty
          [string] $tipCategory = [string]::Empty
          [string[]] $tipUrls = @()
          [string] $tipAuthor = [string]::Empty
          [string] $tipExpiryDate = [string]::Empty

          # Extract the data from the markdown representation of the issue.
          # GitHub Forms generates structured markdown with specific section headers we can match against.
          # Below is a sample of what the body data may look like:
          #
          # ### Tip Title (required)
          # Test title
          # ### Tip Text (required)
          # Test description
          # ### Example Code (optional)
          # ```powershell
          # Test code
          # ```
          # ### URL 1 (optional)
          # https://one.com
          # ### URL 2 (optional)
          # http://two.com
          # ### URL 3 (optional)
          # _No response_
          # ### Category (required)
          # Terminal
          # ### Author (optional)
          # _No response_
          # ### Expiry Date (optional)
          # _No response_

          # The default text that GitHub Issues uses for optional fields that are not filled in.
          [string] $noResponseText = '_No response_'

          # Extract Title.
          [regex] $titleRegex = '### Tip Title \(required\)\s+(?<Title>.*?)\s+### Tip Text'
          if ($body -match $titleRegex) {
            $tipTitle = $Matches['Title'].Trim()
            Write-Output "Extracted Title: $tipTitle"
          }

          # Extract Tip Text. Use '(?s)' for multiline match mode, since these are multiline strings.
          [regex] $tipTextRegex = '(?s)### Tip Text \(required\)\s+(?<TipText>.*?)\s+### Example Code'
          if ($body -match $tipTextRegex) {
            $tipText = $Matches['TipText'].Trim()
            Write-Output "Extracted Tip Text: $tipText"
          }

          # Extract Example Code. Use '(?s)' for multiline match mode, since these are multiline strings.
          [regex] $exampleRegex = '(?s)### Example Code \(optional\)\s+```powershell\\n(?<ExampleCode>.*?)```\s+### URL 1'
          if ($body -match $exampleRegex) {
            $tipExample = $Matches['ExampleCode'].Trim()
            Write-Output "Extracted Example Code: $tipExample"
          }

          # Extract URLs (up to 3).
          [regex] $url1Regex = '### URL 1 \(optional\)\s+(?<Url1>.*?)\s+### URL 2'
          if ($body -match $url1Regex) {
            $url = $Matches['Url1'].Replace($noResponseText, '').Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              $tipUrls += $url
              Write-Output "Extracted URL 1: $url"
            }
          }

          [regex] $url2Regex = '### URL 2 \(optional\)\s+(?<Url2>.*?)\s+### URL 3'
          if ($body -match $url2Regex) {
            $url = $Matches['Url2'].Replace($noResponseText, '').Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              $tipUrls += $url
              Write-Output "Extracted URL 2: $url"
            }
          }

          [regex] $url3Regex = '### URL 3 \(optional\)\s+(?<Url3>.*?)\s+### Category'
          if ($body -match $url3Regex) {
            $url = $Matches['Url3'].Replace($noResponseText, '').Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              $tipUrls += $url
              Write-Output "Extracted URL 3: $url"
            }
          }

          # Extract Category.
          [regex] $categoryRegex = '### Category \(required\)\s+(?<Category>.*?)\s+### Author'
          if ($body -match $categoryRegex) {
            $tipCategory = $Matches['Category'].Trim()
            Write-Output "Extracted Category: $tipCategory"
          }

          # Extract Author.
          [regex] $authorRegex = '### Author \(optional\)\s+(?<Author>.*?)\s+### Expiry Date'
          if ($body -match $authorRegex) {
            $tipAuthor = $Matches['Author'].Trim()
            Write-Output "Extracted Author: $tipAuthor"
          }

          Write-Output "Dot-sourcing utility script used to create the new tip file..."
          [string] $gitRootDirectoryPath = $Env:GITHUB_WORKSPACE
          . "$gitRootDirectoryPath/.github/workflows/ProcessNewPowerShellTipIssueFunctions.ps1"

          Write-Output "Calling function to create new tip file..."
          $newTipFileParameters = @{
            TipTitle = $tipTitle
            TipText = $tipText
            TipExample = $tipExample.Replace($noResponseText, '').Trim()
            TipUrls = $tipUrls
            TipCategory = $tipCategory.Replace($noResponseText, '').Trim()
            TipAuthor = $tipAuthor.Replace($noResponseText, '').Trim()
            TipExpiryDate = $tipExpiryDate
          }
          [string] $newTipFilePath = New-PowerShellTipFile @newTipFileParameters

          Write-Output "Writing variables to environment variables for later steps..."
          "tip_file_path=$newTipFilePath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "tip_title=$tipTitle" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Push changes and create PR
        id: create-pr
        shell: pwsh
        run: |
          Write-Output "Committing changes to local branch and pushing to remote..."
          git add "${{ steps.create-tip-file.outputs.tip_file_path }}"
          git commit -m "Add new tip: ${{ steps.create-tip-file.outputs.tip_title }}"

          # Git pull is only needed when run fails and needs to be re-run.
          git pull --rebase origin "${{ steps.create-branch.outputs.branch_name }}"
          git push --set-upstream origin "${{ steps.create-branch.outputs.branch_name }}"

          [string] $message = @"
          This PR adds a new PowerShell tip submitted via issue #${{ github.event.issue.number }}.

          Next steps are to wait for the PR checks to pass, and for the maintainer to review and merge this PR.

          This PR was created automatically using a GitHub Action.
          "@

          Write-Output "Creating pull request..."
          [string] $prUrl = gh pr create `
            --title "Tip: ${{ steps.create-tip-file.outputs.tip_title }}" `
            --body $message `
            --label "automation-new-tip-pr-do-not-use"

          Write-Output "Writing variables to environment variables for later steps..."
          "pr_url=$prUrl" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close issue
        shell: pwsh
        run: |
          [string] $message = @"
          Thanks for contributing! üôå

          A pull request has been created for your tip. You can view it at PR ${{ steps.create-pr.outputs.pr_url }}.

          This issue has been processed and will now be closed.
          "@

          Write-Output "Closing issue and adding comment..."
          gh issue close "${{ github.event.issue.number }}" --comment $message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
